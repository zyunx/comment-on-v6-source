================
How does LD work
================

source code:

foo()
{
}

object code (in octal, output by od):

0000000 000407 000014 000000 000000 000110 000000 000000 000000
0000020 004567 177774 004767 177770 000167 177764 000000 000051
0000040 000000 000071 000000 000131 063137 067557 000000 000000
0000060 000042 000000 063176 067557 000000 000000 000002 000000
0000100 071543 000166 000000 000000 000040 000000 061137 071141
0000120 000000 000000 000040 000000 030514 000000 000000 000000
0000140 000002 000010 071143 072145 000000 000000 000040 000000

header
0000000: 000407 000014 000000 000000 000110 000000 000000 000000
magic number: 000407
text size: 000014
data size: 000000
bss size: 000000
symbol table size: 000110
entry point: 000000
next word is unused
relocation flag: 000000 (enabled)

text segment
0000020: 004567 177774 004767 177770 000167 177764
disassembled:
JSR R5, 177774(PC)
JSR PC, 177770(PC)
JMP 177764(PC)


data segment: None

relocation bits:
0000034: 000000 000051 000000 000071 000000 000131

000000: reference is absolute, and is to actual symbol
000051: (0: 1, 1-3: 100, symbol index: 10): reference is relative to PC, to  an  undefined  external
000071: (0: 1, 1-3: 100, symbol index: 11): reference is relative to PC, to  an  undefined  external
000131: (0: 1, 1-3: 100, symbol index: 101) reference is relative to PC, to  an  undefined  external

10 100 1
11 100 1
101 100 1
symbol table
0000050 063137 067557 000000 000000 000042 000000 063176 067557
0000070 000000 000000 000002 000000 071543 000166 000000 000000
0000110 000040 000000 061137 071141 000000 000000 000040 000000
0000130 030514 000000 000000 000000 000002 000010 071143 072145
0000150 000000 000000 000040 000000

0000050  _  f  o  o \0 \0 \0 \0  " \0 \0 \0  ~  f  o  o
0000070 \0 \0 \0 \0 \? \0 \0 \0  c  s  v \0 \0 \0 \0 \0
0000110    \0 \0 \0  _  b  a  r \0 \0 \0 \0    \0 \0 \0
0000130  L  1 \0 \0 \0 \0 \0 \0 \? \0 \? \0  c  r  e  t
0000150 \0 \0 \0 \0    \0 \0 \0

0: _foo, text segment external symbol, 000000
1: ~foo, text segment symbol, 000000
2: csv, undefined external (.globl) symbol, 000000
3: _bar, undefined external (.globl) symbol, 000000
4: L1, text segment symbol, 000010
5: cret, undefined external (.globl) symbol, 000000



bar.c
source code
xx()
{
}

bar()
{
}

object code
0000000 000407 000020 000000 000000 000140 000000 000000 000000
0000020 004567 177774 000167 177770 004567 177764 000167 177760
0000040 000000 000051 000000 000111 000000 000051 000000 000111
0000060 074137 000170 000000 000000 000042 000000 074176 000170
0000100 000000 000000 000002 000000 071543 000166 000000 000000
0000120 000040 000000 030514 000000 000000 000000 000002 000004
0000140 071143 072145 000000 000000 000040 000000 061137 071141
0000160 000000 000000 000042 000010 061176 071141 000000 000000
0000200 000002 000010 031114 000000 000000 000000 000002 000014

header
0000000: 000407 000020 000000 000000 000140 000000 000000 000000
magic number: 000407
text size: 000020
data size: 000000
bss size: 000000
symbol table size: 000140
entry point: 000000
next word is unused
relocation flag: 000000 (enabled)

text segment:
0000020: 004567 177774 000167 177770 004567 177764 000167 177760
JSR R5, 177774(PC)
JMP 177770(PC)
JSR R5, 177764(PC)
JMP 177760(PC)

rel bits:
0000040: 000000 000051 000000 000111 000000 000051 000000 000111

000051: (0: 1, 1-3: 100, symbol index: 10): reference is relative to PC, to  an  undefined  external
000111: (0: 1, 1-3: 100, symbol index: 100) reference is relative to PC, to  an  undefined  external

symbol tables:
0000060 074137 000170 000000 000000 000042 000000 074176 000170
0000100 000000 000000 000002 000000 071543 000166 000000 000000
0000120 000040 000000 030514 000000 000000 000000 000002 000004
0000140 071143 072145 000000 000000 000040 000000 061137 071141
0000160 000000 000000 000042 000010 061176 071141 000000 000000
0000200 000002 000010 031114 000000 000000 000000 000002 000014

0000060  _  x  x \0 \0 \0 \0 \0  " \0 \0 \0  ~  x  x \0
0000100 \0 \0 \0 \0 \? \0 \0 \0  c  s  v \0 \0 \0 \0 \0
0000120    \0 \0 \0  L  1 \0 \0 \0 \0 \0 \0 \? \0 \? \0
0000140  c  r  e  t \0 \0 \0 \0    \0 \0 \0  _  b  a  r
0000160 \0 \0 \0 \0  " \0 \? \0  ~  b  a  r \0 \0 \0 \0
0000200 \? \0 \? \0  L  2 \0 \0 \0 \0 \0 \0 \? \0 \? \0

0: _xx, text segment external symbol, 000000
1: ~xx, text segment symbol, 000000
2: csv, undefined external (.globl) symbol, 000000
3: L1, text segment symbol, 000004
4: cret, undefined external (.globl) symbol, 000000
5: _bar, text segment external symbol, 000010
6: ~bar, text segment symbol, 000010
7: L2, text segment symbol, 000014


ld -r foo.o bar.o

object code:
0000000 000407 000034 000000 000000 000234 000000 000000 000000
0000020 004567 177774 000167 177770 004567 177764 000167 177760
0000040 004567 177754 004767 177760 000167 177744 000000 000231
0000060 000000 000251 000000 000231 000000 000251 000000 000231
0000100 000000 000003 000000 000251 060542 027162 000157 000000
0000120 000037 000000 074176 000170 000000 000000 000002 000000
0000140 030514 000000 000000 000000 000002 000004 061176 071141
0000160 000000 000000 000002 000010 031114 000000 000000 000000
0000200 000002 000014 067546 027157 000157 000000 000037 000020
0000220 063176 067557 000000 000000 000002 000020 030514 000000
0000240 000000 000000 000002 000030 074137 000170 000000 000000
0000260 000042 000000 071543 000166 000000 000000 000040 000000
0000300 071143 072145 000000 000000 000040 000000 061137 071141
0000320 000000 000000 000042 000010 063137 067557 000000 000000
0000340 000042 000020

header
0000000: 000407 000034 000000 000000 000234 000000 000000 000000

magic: 000407
text seg size: 000034
data seg size: 0
bss seg size: 0
symbol table size: 000234
entry point: 0
unused: 0
rel flag: 0 (enabled)

text segment
0000020: 004567 177774 000167 177770 004567 177764 000167 177760
0000040: 004567 177754 004767 177760 000167 177744

JSR R5, 177774(PC)
JMP 177770(PC)
JSR R5, 177764(PC)
JMP 177760(PC)

JSR R5, 177754(PC)
JSR PC, 177760(PC)
JMP 177744(PC)

rel bits:
000000 000231
000000 000251 000000 000231 000000 000251 000000 000231
000000 000003 000000 000251

000231: relative, to  an  undefined  external, 9
000251: relative, to  an  undefined  external, 10
000003: relative, to the text segment


symbol table:
0000110 060542 027162 000157 000000 000037 000000 074176 000170
0000130 000000 000000 000002 000000 030514 000000 000000 000000
0000150 000002 000004 061176 071141 000000 000000 000002 000010
0000170 031114 000000 000000 000000 000002 000014 067546 027157
0000210 000157 000000 000037 000020 063176 067557 000000 000000
0000230 000002 000020 030514 000000 000000 000000 000002 000030
0000250 074137 000170 000000 000000 000042 000000 071543 000166
0000270 000000 000000 000040 000000 071143 072145 000000 000000
0000310 000040 000000 061137 071141 000000 000000 000042 000010
0000330 063137 067557 000000 000000 000042 000020

0000110  b  a  r  .  o \0 \0 \0 \? \0 \0 \0  ~  x  x \0
0000130 \0 \0 \0 \0 \? \0 \0 \0  L  1 \0 \0 \0 \0 \0 \0
0000150 \? \0 \? \0  ~  b  a  r \0 \0 \0 \0 \? \0 \? \0
0000170  L  2 \0 \0 \0 \0 \0 \0 \? \0 \? \0  f  o  o  .
0000210  o \0 \0 \0 \? \0 \? \0  ~  f  o  o \0 \0 \0 \0
0000230 \? \0 \? \0  L  1 \0 \0 \0 \0 \0 \0 \? \0 \? \0
0000250  _  x  x \0 \0 \0 \0 \0  " \0 \0 \0  c  s  v \0
0000270 \0 \0 \0 \0    \0 \0 \0  c  r  e  t \0 \0 \0 \0
0000310    \0 \0 \0  _  b  a  r \0 \0 \0 \0  " \0 \? \0
0000330  _  f  o  o \0 \0 \0 \0  " \0 \? \0


ld bar.o foo.o -lc

object code:
0000000 000407 000070 000000 000000 000250 000000 000000 000001
0000020 004567 000030 000167 000042 004567 000020 000167 000032
0000040 004567 000010 004767 177760 000167 000016 010500 010605
0000060 010446 010346 010246 005746 000110 010501 014104 014103
0000100 014102 010506 012605 000207 060542 027162 000157 000000
0000120 000037 000000 074176 000170 000000 000000 000002 000000
0000140 030514 000000 000000 000000 000002 000004 061176 071141
0000160 000000 000000 000002 000010 031114 000000 000000 000000
0000200 000002 000014 067546 027157 000157 000000 000037 000020
0000220 063176 067557 000000 000000 000002 000020 030514 000000
0000240 000000 000000 000002 000030 071543 027166 000157 000000
0000260 000037 000034 074137 000170 000000 000000 000042 000000
0000300 071543 000166 000000 000000 000042 000034 071143 072145
0000320 000000 000000 000042 000052 061137 071141 000000 000000
0000340 000042 000010 063137 067557 000000 000000 000042 000020

header
0000000: 000407 000070 000000 000000 000250 000000 000000 000001

magic: 000407
text seg size: 000070
data seg size: 0
bss seg size: 0
symbol table size: 000250
entry point: 0
unused: 0
rel flag: 1 (none)


text segment:
0000020 004567 000030 000167 000042 004567 000020 000167 000032
0000040 004567 000010 004767 177760 000167 000016 010500 010605
0000060 010446 010346 010246 005746 000110 010501 014104 014103
0000100 014102 010506 012605 000207
disassembled:

JSR R5, 000030(PC)
JMP 000042(PC)
JSR R5, 000020(PC)
JMP 000032(PC)

JSR R5, 000010(PC)
JSR PC, 177760(PC)
JMP 000016(PC)


ld.c
====

file content abstraction
------------------------

struct	page {
	int	nuser;			/* comment: number of user */
	int	bno;			/* comment: 512B-block number */
	int	nibuf;			/* comment: number of word in buff */
	int	buff[256];
} page[2];

struct	{
	int	nuser;
	int	bno;
} fpage;				/* comment: empty page */

struct	stream {
	int	*ptr;
	int	bno;
	int	nibuf;
	int	size;
	struct	page *pno;
};

current file
int infil

/* comment: seek data at offset `o`,
 * of size `s`, at block `ab` of file `infil`
 * into stream `asp`.
 */
 /* comment:
 * asp: stream *
 * ab, bno
 * o: offset in word
 * s: size in byte
 */
dseek(asp, ab, o, s)

/* comment: get a word from stream */
get(asp)


link logic
----------

getfile
open object file or archive file, init text stream

mget
copy from text stream

load1
load from text stream

    readhdr




symbol relocation formula

symbol value = symbol address

current value + segment address
text:
text symbol value + text begin address
data:
data symbol value + data begin address 

new symbol value = (new symbol address)
                 = (old symbol address + relocation address)

for text:
new symbol value = old symbol address + relocation address
                 = old symbol value - curent tsize

for data:
new symbol value = old symbol address + relocation address
                 = old symbol value - tsize



final value in text + (rel) = value of symbol + (rel) + word in text(constant)
new final value in text = new value of symbo + word in text


for 407 file
value of data symbol is relative to 0, that is begin of text segment.
value of data symbol relative to data segment is less than that relative to text segment.
The difference is text segment size.


